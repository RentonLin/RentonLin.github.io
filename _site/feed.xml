<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-20T22:14:59+08:00</updated><id>http://localhost:4000/</id><title type="html">ToraceOn Studio</title><subtitle>Record</subtitle><entry><title type="html">What are the transforming operators in RxSwift</title><link href="http://localhost:4000/collection,/rxswift/2018/06/20/what-are-the-transforming-operators-in-RxSwift.html" rel="alternate" type="text/html" title="What are the transforming operators in RxSwift" /><published>2018-06-20T22:02:00+08:00</published><updated>2018-06-20T22:02:00+08:00</updated><id>http://localhost:4000/collection,/rxswift/2018/06/20/what-are-the-transforming-operators-in-RxSwift</id><content type="html" xml:base="http://localhost:4000/collection,/rxswift/2018/06/20/what-are-the-transforming-operators-in-RxSwift.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;what-are-the-transforming-operators-in-rxswift&quot;&gt;What are the transforming operators in RxSwift&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;map&quot;&gt;Map&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;Transform element to other, just like map in Swift&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;flatmap&quot;&gt;FlatMap&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;Generate a new type of Observable to each element, and merge all the new Observables and subscribe to it&lt;/li&gt;
          &lt;li&gt;Be careful, any observable sending error will make the terminate the observable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;flatmaplatest&quot;&gt;FlatMapLatest&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;Generate a new type of Observable to each element, and only subscribe to the newest Observable&lt;/li&gt;
          &lt;li&gt;You can use this to deal with error events and filter them&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;materialize&quot;&gt;Materialize&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;Observe to events of an observable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;dematerialize&quot;&gt;Dematerialize&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;Get element from event, used with Materialize&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to use &lt;a href=&quot;https://github.com/malcommac/SwiftRichString&quot;&gt;SwiftRichString&lt;/a&gt; to generate attributes string
    &lt;ul&gt;
      &lt;li&gt;Create a style object and call setStyle on string
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let style = Style {
$0.color = UIColor.white
$0.alignment = .center
....
}
let hello = &quot;Hello&quot;.set(style: Style)
let world = &quot;world&quot;.set(style: Style)
print(hello + world)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;You don’t need to remember all those keys.font congratulations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">What are the transforming operators in RxSwift Map Transform element to other, just like map in Swift FlatMap Generate a new type of Observable to each element, and merge all the new Observables and subscribe to it Be careful, any observable sending error will make the terminate the observable FlatMapLatest Generate a new type of Observable to each element, and only subscribe to the newest Observable You can use this to deal with error events and filter them Materialize Observe to events of an observable Dematerialize Get element from event, used with Materialize How to use SwiftRichString to generate attributes string Create a style object and call setStyle on string let style = Style { $0.color = UIColor.white $0.alignment = .center .... } let hello = &quot;Hello&quot;.set(style: Style) let world = &quot;world&quot;.set(style: Style) print(hello + world) You don’t need to remember all those keys.font congratulations</summary></entry><entry><title type="html">How to send next in observer of Observer</title><link href="http://localhost:4000/collection,/rxswift/2018/06/17/how-to-send-next-in-Observer-void.html" rel="alternate" type="text/html" title="How to send next in observer of Observer&lt;Void&gt;" /><published>2018-06-17T15:13:00+08:00</published><updated>2018-06-17T15:13:00+08:00</updated><id>http://localhost:4000/collection,/rxswift/2018/06/17/how-to-send-next-in-Observer-void</id><content type="html" xml:base="http://localhost:4000/collection,/rxswift/2018/06/17/how-to-send-next-in-Observer-void.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;we-can-use--to-represent-void&quot;&gt;We can use () to represent Void&lt;/h3&gt;
    &lt;p&gt;Use void when represent observer when you just need tell observer that certain things happens but no detail should be provided&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let o = PublishSubject&amp;lt;Void&amp;gt;()
o.onNext(())
o.subscribe()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">We can use () to represent Void Use void when represent observer when you just need tell observer that certain things happens but no detail should be provided let o = PublishSubject&amp;lt;Void&amp;gt;() o.onNext(()) o.subscribe()</summary></entry><entry><title type="html">How to migrate FMDB along with new App releases</title><link href="http://localhost:4000/collection/base/fmdb/2018/06/13/how-to-update-fmdb-along-with-app-release.html" rel="alternate" type="text/html" title="How to migrate FMDB along with new App releases" /><published>2018-06-13T23:00:00+08:00</published><updated>2018-06-13T23:00:00+08:00</updated><id>http://localhost:4000/collection/base/fmdb/2018/06/13/how-to-update-fmdb-along-with-app-release</id><content type="html" xml:base="http://localhost:4000/collection/base/fmdb/2018/06/13/how-to-update-fmdb-along-with-app-release.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-create-a-unique-id-in-ios-with-swift&quot;&gt;How to create a unique id in iOS with Swift&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let uuid = UUID().uuidString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-migrate-fmdb-along-with-new-app-releases&quot;&gt;How to migrate FMDB along with new App releases&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Tool: &lt;a href=&quot;https://github.com/layerhq/FMDBMigrationManager&quot;&gt;FMDBMigrationManager&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;How: Treat your database like git repository, add modifications like commits, and apply commits to the current state&lt;/li&gt;
      &lt;li&gt;Steps:
        &lt;ul&gt;
          &lt;li&gt;install FMDBMigrationManager with pod&lt;/li&gt;
          &lt;li&gt;New a FMDBMigrationManager linked to your database&lt;/li&gt;
          &lt;li&gt;Create a version table with FMDBMigrationManager&lt;/li&gt;
          &lt;li&gt;As your apps release, new migrations are need&lt;/li&gt;
          &lt;li&gt;New migrate objects that confirm FMDBMigrating
            &lt;ul&gt;
              &lt;li&gt;Implement methods in the protocol&lt;/li&gt;
              &lt;li&gt;Version and progress closure is the most important part&lt;/li&gt;
              &lt;li&gt;Which determine the order of migrations and what will be done&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Migrate to latest version
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//create manager
FMDBMigrationManager *manager = [FMDBMigrationManager managerWithDatabaseAtPath:@&quot;path/to/your/DB.sqlite&quot; migrationsBundle:[NSBundle mainBundle]];
//create table, check existed before create
BOOL success = [manager createMigrationsTable:&amp;amp;error];
//New objects confirm to FMDBMigrating
//Add to manager
[manager addMigrations:[#yourMigrations]]
//migrate
BOOL success = [manager migrateDatabaseToVersion:UINT64_MAX progress:nil error:&amp;amp;error];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;As your app continue releases, just new FMDBMigrating objects and add them to manager&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">How to create a unique id in iOS with Swift let uuid = UUID().uuidString How to migrate FMDB along with new App releases Tool: FMDBMigrationManager How: Treat your database like git repository, add modifications like commits, and apply commits to the current state Steps: install FMDBMigrationManager with pod New a FMDBMigrationManager linked to your database Create a version table with FMDBMigrationManager As your apps release, new migrations are need New migrate objects that confirm FMDBMigrating Implement methods in the protocol Version and progress closure is the most important part Which determine the order of migrations and what will be done Migrate to latest version //create manager FMDBMigrationManager *manager = [FMDBMigrationManager managerWithDatabaseAtPath:@&quot;path/to/your/DB.sqlite&quot; migrationsBundle:[NSBundle mainBundle]]; //create table, check existed before create BOOL success = [manager createMigrationsTable:&amp;amp;error]; //New objects confirm to FMDBMigrating //Add to manager [manager addMigrations:[#yourMigrations]] //migrate BOOL success = [manager migrateDatabaseToVersion:UINT64_MAX progress:nil error:&amp;amp;error]; As your app continue releases, just new FMDBMigrating objects and add them to manager</summary></entry><entry><title type="html">Collection in 2018-05-27</title><link href="http://localhost:4000/collection/2018/05/27/daily-collection.html" rel="alternate" type="text/html" title="Collection in 2018-05-27" /><published>2018-05-27T20:47:57+08:00</published><updated>2018-05-27T20:47:57+08:00</updated><id>http://localhost:4000/collection/2018/05/27/daily-collection</id><content type="html" xml:base="http://localhost:4000/collection/2018/05/27/daily-collection.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-change-key-binding-when-using-a-normal-keyboard-in-macos&quot;&gt;How to change key binding when using a normal keyboard in MacOS&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Preference -&amp;gt; Keyboard -&amp;gt; Modifier keys&lt;/li&gt;
      &lt;li&gt;Exchange Command and option&lt;/li&gt;
      &lt;li&gt;Of course you can also change other keys like Control, Caps Lock, Fn  here&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-detect-link-or-number-in-uitextview&quot;&gt;How to detect link or number in UITextView&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;property: UIDataDectorTypes&lt;/li&gt;
      &lt;li&gt;Change this property to what you like: .link, .address, .calendarEvent, .shipmentTrackingNumber, .FlightNumber, .lookupSuggestion, .all&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-handle-click-of-the-dectected-types-in-uitextview&quot;&gt;How to handle click of the dectected types in UITextView&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Implete method in UITextViewDelegate&lt;/li&gt;
      &lt;li&gt;iOS10 and later&lt;/li&gt;
      &lt;li&gt;TextView(:shouldInteractWithURL:inRange:interaction:)
        &lt;ul&gt;
          &lt;li&gt;return false and handle by yourself&lt;/li&gt;
          &lt;li&gt;or just return true&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;There are 3 kinds of interaction:
        &lt;ul&gt;
          &lt;li&gt;.default&lt;/li&gt;
          &lt;li&gt;.present&lt;/li&gt;
          &lt;li&gt;.preview&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-change-double-to-string-with-formate&quot;&gt;How to change double to string with formate&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;let s = String(formate:”%.2f”, 0.019)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-draw-a-rect-with-round-corner-in-context&quot;&gt;How to draw a rect with round corner in context&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Normal way
        &lt;ul&gt;
          &lt;li&gt;context.beginPath&lt;/li&gt;
          &lt;li&gt;move&lt;/li&gt;
          &lt;li&gt;drawToPoint&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Easy way
        &lt;ul&gt;
          &lt;li&gt;Using UIBezierPath&lt;/li&gt;
          &lt;li&gt;In this way, drawing rect with round corner is just like new a view and set its layer’s cornerRadius
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Don't forget set path fillColor and strokeColor before stroke or fill
let path = UIBezierPath(rounderRect:cornerRadius:)
path.stroke()
path.fill()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-capture-several-variables-in-closure-in-swift&quot;&gt;How to capture several variables in closure in Swift&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;[weak v1, weak v2]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;hot-to-make-image-in-button-fill-button-even-if-image-is-smaller-than-buttons-size&quot;&gt;Hot to make image in button fill button even if image is smaller than button’s size&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;btn.contentVerticalAlignment = .fill
btn.contentHorizontaolAlignment = .fill
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-bind-credit-card-to-japanese-apple-id&quot;&gt;How to bind credit card to Japanese Apple ID&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Get a credit card with JCB, CMB JCB card in my case&lt;/li&gt;
      &lt;li&gt;Make sure it is ready for purchasing as Apple will try to make a bill of $0.01 when binding&lt;/li&gt;
      &lt;li&gt;On Mac OS, enable VPN of Japanese VPS&lt;/li&gt;
      &lt;li&gt;Enable global proxy&lt;/li&gt;
      &lt;li&gt;Open iTunes and login your Japanese App Store account&lt;/li&gt;
      &lt;li&gt;In account detail, edit payment method and input your JCB card info&lt;/li&gt;
      &lt;li&gt;Your card will have a $0.01 bill and then all is done&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">How to change key binding when using a normal keyboard in MacOS Preference -&amp;gt; Keyboard -&amp;gt; Modifier keys Exchange Command and option Of course you can also change other keys like Control, Caps Lock, Fn here How to detect link or number in UITextView property: UIDataDectorTypes Change this property to what you like: .link, .address, .calendarEvent, .shipmentTrackingNumber, .FlightNumber, .lookupSuggestion, .all How to handle click of the dectected types in UITextView Implete method in UITextViewDelegate iOS10 and later TextView(:shouldInteractWithURL:inRange:interaction:) return false and handle by yourself or just return true There are 3 kinds of interaction: .default .present .preview How to change double to string with formate let s = String(formate:”%.2f”, 0.019) How to draw a rect with round corner in context Normal way context.beginPath move drawToPoint Easy way Using UIBezierPath In this way, drawing rect with round corner is just like new a view and set its layer’s cornerRadius //Don't forget set path fillColor and strokeColor before stroke or fill let path = UIBezierPath(rounderRect:cornerRadius:) path.stroke() path.fill() How to capture several variables in closure in Swift [weak v1, weak v2] Hot to make image in button fill button even if image is smaller than button’s size btn.contentVerticalAlignment = .fill btn.contentHorizontaolAlignment = .fill How to bind credit card to Japanese Apple ID Get a credit card with JCB, CMB JCB card in my case Make sure it is ready for purchasing as Apple will try to make a bill of $0.01 when binding On Mac OS, enable VPN of Japanese VPS Enable global proxy Open iTunes and login your Japanese App Store account In account detail, edit payment method and input your JCB card info Your card will have a $0.01 bill and then all is done</summary></entry><entry><title type="html">Collection in 2018-05-22</title><link href="http://localhost:4000/collection/2018/05/22/Collections.html" rel="alternate" type="text/html" title="Collection in 2018-05-22" /><published>2018-05-22T09:25:40+08:00</published><updated>2018-05-22T09:25:40+08:00</updated><id>http://localhost:4000/collection/2018/05/22/Collections</id><content type="html" xml:base="http://localhost:4000/collection/2018/05/22/Collections.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;how-to-input-special-symbol-in-xcodemacos&quot;&gt;How to input special symbol in Xcode/Macos&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Press Command + Control + Space to call out symbol keyboard&lt;/li&gt;
      &lt;li&gt;Choose from the symobls&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;what-does-initcoder-do&quot;&gt;What does init(coder:) do&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;It is actually part of Protocol NSCoding&lt;/li&gt;
      &lt;li&gt;NSCoding has two methods
        &lt;ul&gt;
          &lt;li&gt;encdoe(coder:)
            &lt;ul&gt;
              &lt;li&gt;Save what you config in xib or storyboard to disk&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;init(coder:)
            &lt;ul&gt;
              &lt;li&gt;Generate Instance of your view from disk&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;If you don’t use xib or storyboard
        &lt;ul&gt;
          &lt;li&gt;Just input fatalerror(error)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">How to input special symbol in Xcode/Macos Press Command + Control + Space to call out symbol keyboard Choose from the symobls What does init(coder:) do It is actually part of Protocol NSCoding NSCoding has two methods encdoe(coder:) Save what you config in xib or storyboard to disk init(coder:) Generate Instance of your view from disk If you don’t use xib or storyboard Just input fatalerror(error)</summary></entry><entry><title type="html">Hot to get model from indexPath in a Rx way</title><link href="http://localhost:4000/collection/2018/05/21/how-to-get-model-from-indexPath.html" rel="alternate" type="text/html" title="Hot to get model from indexPath in a Rx way" /><published>2018-05-21T23:22:40+08:00</published><updated>2018-05-21T23:22:40+08:00</updated><id>http://localhost:4000/collection/2018/05/21/how-to-get-model-from-indexPath</id><content type="html" xml:base="http://localhost:4000/collection/2018/05/21/how-to-get-model-from-indexPath.html">&lt;ul&gt;
  &lt;li&gt;Two ways to get model from indexPath of TableView &amp;amp; CollectionView
    &lt;ul&gt;
      &lt;li&gt;Use indexPath and dataSource to get model
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.just(indexPath).withLatestFrom(#ObservableThatBindToYourTableView) { indexPath, datas in
return datas[indexPath.secion][indexPath.row]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Use model&lt;T&gt;(at: indexPath)
&lt;/T&gt;        &lt;ul&gt;
          &lt;li&gt;
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do {
let element: Type = try tableView.model(at: indexPath)
} catch {
//work with error when cast failed
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;Warning: You must specify the type of your variable.&lt;/li&gt;
          &lt;li&gt;Edited: 2018-05-27&lt;/li&gt;
          &lt;li&gt;Your can first transform the data to Any and then downcast to the type of your Model or Protocol
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let e: Any = try tableView.model(at: indexPath)
if let t = e as? Type {
  t.foo()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Two ways to get model from indexPath of TableView &amp;amp; CollectionView Use indexPath and dataSource to get model Observable.just(indexPath).withLatestFrom(#ObservableThatBindToYourTableView) { indexPath, datas in return datas[indexPath.secion][indexPath.row] } Use model(at: indexPath) do { let element: Type = try tableView.model(at: indexPath) } catch { //work with error when cast failed } Warning: You must specify the type of your variable. Edited: 2018-05-27 Your can first transform the data to Any and then downcast to the type of your Model or Protocol let e: Any = try tableView.model(at: indexPath) if let t = e as? Type { t.foo() }</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-05-19T00:42:40+08:00</published><updated>2018-05-19T00:42:40+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Hot to start writing a blog with Jekyll on GitHubPages</title><link href="http://localhost:4000/jekyll/update/2018/05/19/how-to-write-blog-with-Jekyll-and-github-pages.html" rel="alternate" type="text/html" title="Hot to start writing a blog with Jekyll on GitHubPages" /><published>2018-05-19T00:42:40+08:00</published><updated>2018-05-19T00:42:40+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/how-to-write-blog-with-Jekyll-and-github-pages</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/how-to-write-blog-with-Jekyll-and-github-pages.html">&lt;ul&gt;
  &lt;li&gt;吐槽:Jekyll官方的文档真的是啰嗦，刚开始写blog的人一上来，谁关心你的目录结构是啥，谁关心你那花哨的模板。安装就得好久，再那么啰嗦地show你能做的东西谁关心？上来就教人建个网站，写一段文字不是比什么都好?&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Create project in github with name same as your github account name&lt;/li&gt;
  &lt;li&gt;Check out the repository&lt;/li&gt;
  &lt;li&gt;Install ruby, budle, Jekyll&lt;/li&gt;
  &lt;li&gt;Create a blog in your repository’s path&lt;/li&gt;
  &lt;li&gt;Config -config.yml , change baseurl to the newly created blog path&lt;/li&gt;
  &lt;li&gt;Create file in -posts directory, with name like 2018-05-19-name-of-your-blog.markdown&lt;/li&gt;
  &lt;li&gt;Edit your new file&lt;/li&gt;
  &lt;li&gt;Run Jekyll build on your blog root directory&lt;/li&gt;
  &lt;li&gt;Run Jekyll serve on your blog ROOT directory&lt;/li&gt;
  &lt;li&gt;Test your blog on localhost/4000&lt;/li&gt;
  &lt;li&gt;Add . and push to master branch of your site&lt;/li&gt;
  &lt;li&gt;Check your sites after a few seconds&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">吐槽:Jekyll官方的文档真的是啰嗦，刚开始写blog的人一上来，谁关心你的目录结构是啥，谁关心你那花哨的模板。安装就得好久，再那么啰嗦地show你能做的东西谁关心？上来就教人建个网站，写一段文字不是比什么都好?</summary></entry><entry><title type="html">Daily collection 2018/05/19</title><link href="http://localhost:4000/jekyll/update/2018/05/19/daily-collec.html" rel="alternate" type="text/html" title="Daily collection 2018/05/19" /><published>2018-05-19T00:42:40+08:00</published><updated>2018-05-19T00:42:40+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/daily-collec</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/daily-collec.html">&lt;ol&gt;
  &lt;li&gt;How to use timer with RxSwift
    &lt;ul&gt;
      &lt;li&gt;Problems with NSTimer
        &lt;ul&gt;
          &lt;li&gt;NSTimer will retain target which often cause retain cycle.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How to use timer with RxSwift
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   let o = Observable&amp;lt;Int&amp;gt;.timer(#dueTime, period: #lap?, scheduler: scheduler).subscribe()

   //DueTime is the the first time you will timer to fire
   //Lap is the inter-period between after fires, if nil is provided, the timer will only fire once. In this way you can create repeat timer and unrepeat timers
   //Scheduler: Scheduler where you will your timer to fire

   //Warning:The following timer will never fire unless you subscribe it.
   let o = Observable&amp;lt;Int&amp;gt;.timer(#dueTime, period: #lap?, scheduler: scheduler)

   //How to stop a timer? Just dipose the subscription
   let disposebal = Observable&amp;lt;Int&amp;gt;.timer(#dueTime, period: #lap?, scheduler: scheduler).sbuscribe()
   disposebal.dispose()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When will subscription release in RxSwift?
    &lt;ul&gt;
      &lt;li&gt;Disposebal.dispose(by: disposeBag)
        &lt;ul&gt;
          &lt;li&gt;Subscription blocks(nextBlock, errorBlock) and the values retained by them will be released when disposeBag is released&lt;/li&gt;
          &lt;li&gt;Normally we create a disposeBag as a property of current object, when current object deinit, its disposeBag will also deinit, which cause all subscription blocks and value they retained to reduce reference count.&lt;/li&gt;
          &lt;li&gt;So if you retain Self in the blocks, onNext block for example, subscription and self retain each other, which will cause memory leak.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Observer.onError(error), onComplete()
        &lt;ul&gt;
          &lt;li&gt;If the observer calles its onError() or onComplete(), the subscription will also release&lt;/li&gt;
          &lt;li&gt;A common scene for this is the UI actions, when UI element deinit, their observables, button.rx.tap or collectionView.rx.modelSelected will  also dispose&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Edited: 2018-05-27
        &lt;ul&gt;
          &lt;li&gt;Another way to control dispose of your Subscription&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;Using takeUntil
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//before you subscribe your observable, use takeUntil operator to make your observable dispose at a specific time
let o.takeUntil(self.rx.willDealloc).subscribe{#subscribeCode}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to use ssh key to communicate with remote repository
    &lt;ul&gt;
      &lt;li&gt;Create ssh keys pair&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;ssh-keygen&lt;/li&gt;
      &lt;li&gt;Default private key and public key is stored in ~/.ssh/
      * Add to ssh agent&lt;/li&gt;
      &lt;li&gt;ssh-add ~/.ssh/private_key_file
      * Add ssh public key to repository holder&lt;/li&gt;
      &lt;li&gt;Github account preference
      * Test&lt;/li&gt;
      &lt;li&gt;ssh -T git@address_to_repository&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">How to use timer with RxSwift Problems with NSTimer NSTimer will retain target which often cause retain cycle. How to use timer with RxSwift ``` let o = Observable.timer(#dueTime, period: #lap?, scheduler: scheduler).subscribe()</summary></entry></feed>