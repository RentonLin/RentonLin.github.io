<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-19T01:51:25+08:00</updated><id>http://localhost:4000/</id><title type="html">ToraceOn Studio</title><subtitle>Record</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-05-19T00:42:40+08:00</published><updated>2018-05-19T00:42:40+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Hot to start write a blog with Jekyll on GitHubPages</title><link href="http://localhost:4000/jekyll/update/2018/05/19/how-to-write-blog-with-Jekyll-and-github-pages.html" rel="alternate" type="text/html" title="Hot to start write a blog with Jekyll on GitHubPages" /><published>2018-05-19T00:42:40+08:00</published><updated>2018-05-19T00:42:40+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/how-to-write-blog-with-Jekyll-and-github-pages</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/how-to-write-blog-with-Jekyll-and-github-pages.html">&lt;ul&gt;
  &lt;li&gt;吐槽:Jekyll官方的文档真的是啰嗦，刚开始写blog的人一上来，谁关心你的目录结构是啥，谁关心你那花哨的模板。安装就得好久，再那么啰嗦地show你能做的东西谁关心？上来就教人建个网站，写一段文字不是比什么都好?&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Create project in github with name same as your github account name&lt;/li&gt;
  &lt;li&gt;Check out the repository&lt;/li&gt;
  &lt;li&gt;Install ruby, budle, Jekyll&lt;/li&gt;
  &lt;li&gt;Create a blog in your repository’s path&lt;/li&gt;
  &lt;li&gt;Config -config.yml , change baseurl to the newly created blog path&lt;/li&gt;
  &lt;li&gt;Create file in -posts directory, with name like 2018-05-19-name-of-your-blog.markdown&lt;/li&gt;
  &lt;li&gt;Edit your new file&lt;/li&gt;
  &lt;li&gt;Run Jekyll build on your blog root directory&lt;/li&gt;
  &lt;li&gt;Run Jekyll serve on your blog ROOT directory&lt;/li&gt;
  &lt;li&gt;Test your blog on localhost/4000&lt;/li&gt;
  &lt;li&gt;Add . and push to master branch of your site&lt;/li&gt;
  &lt;li&gt;Check your sites after a few seconds&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">吐槽:Jekyll官方的文档真的是啰嗦，刚开始写blog的人一上来，谁关心你的目录结构是啥，谁关心你那花哨的模板。安装就得好久，再那么啰嗦地show你能做的东西谁关心？上来就教人建个网站，写一段文字不是比什么都好?</summary></entry><entry><title type="html">Daily collection 2018/05/19</title><link href="http://localhost:4000/jekyll/update/2018/05/19/daily-collec.html" rel="alternate" type="text/html" title="Daily collection 2018/05/19" /><published>2018-05-19T00:42:40+08:00</published><updated>2018-05-19T00:42:40+08:00</updated><id>http://localhost:4000/jekyll/update/2018/05/19/daily-collec</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/19/daily-collec.html">&lt;ol&gt;
  &lt;li&gt;How to use timer with RxSwift
    &lt;ul&gt;
      &lt;li&gt;Problems with NSTimer
        &lt;ul&gt;
          &lt;li&gt;NSTimer will retain target which often cause retain cycle.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How to use timer with RxSwift
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   let o = Observable&amp;lt;Int&amp;gt;.timer(#dueTime, period: #lap?, scheduler: scheduler).subscribe()

   //DueTime is the the first time you will timer to fire
   //Lap is the inter-period between after fires, if nil is provided, the timer will only fire once. In this way you can create repeat timer and unrepeat timers
   //Scheduler: Scheduler where you will your timer to fire

   //Warning:The following timer will never fire unless you subscribe it.
   let o = Observable&amp;lt;Int&amp;gt;.timer(#dueTime, period: #lap?, scheduler: scheduler)

   //How to stop a timer? Just dipose the subscription
   let disposebal = Observable&amp;lt;Int&amp;gt;.timer(#dueTime, period: #lap?, scheduler: scheduler).sbuscribe()
   disposebal.dispose()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When will subscription release in RxSwift?
    &lt;ul&gt;
      &lt;li&gt;Disposebal.dispose(by: disposeBag)
        &lt;ul&gt;
          &lt;li&gt;Subscription blocks(nextBlock, errorBlock) and the values retained by them will be released when disposeBag is released&lt;/li&gt;
          &lt;li&gt;Normally we create a disposeBag as a property of current object, when current object deinit, its disposeBag will also deinit, which cause all subscription blocks and value they retained to reduce reference count.&lt;/li&gt;
          &lt;li&gt;So if you retain Self in the blocks, onNext block for example, subscription and self retain each other, which will cause memory leak.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Observer.onError(error), onComplete()
        &lt;ul&gt;
          &lt;li&gt;If the observer calles its onError() or onComplete(), the subscription will also release&lt;/li&gt;
          &lt;li&gt;A common scene for this is the UI actions, when UI element deinit, their observables, button.rx.tap or collectionView.rx.modelSelected will  also dispose&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to use ssh key to communicate with remote repository
    &lt;ul&gt;
      &lt;li&gt;Create ssh keys pair&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;ssh-keygen&lt;/li&gt;
      &lt;li&gt;Default private key and public key is stored in ~/.ssh/
      * Add to ssh agent&lt;/li&gt;
      &lt;li&gt;ssh-add ~/.ssh/private_key_file
      * Add ssh public key to repository holder&lt;/li&gt;
      &lt;li&gt;Github account preference
      * Test&lt;/li&gt;
      &lt;li&gt;ssh -T git@address_to_repository&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">How to use timer with RxSwift Problems with NSTimer NSTimer will retain target which often cause retain cycle. How to use timer with RxSwift ``` let o = Observable.timer(#dueTime, period: #lap?, scheduler: scheduler).subscribe()</summary></entry></feed>